#include <stdio.h>

#define MAX_VERTICES 10

int graph[MAX_VERTICES][MAX_VERTICES];
int visited[MAX_VERTICES];
int numVertices;

void printHamiltonianCircuit(int path[]) {
    printf("Hamiltonian Circuit: ");
    for (int i = 0; i < numVertices; i++) {
        printf("%d ", path[i]);
    }
    printf("%d\n", path[0]);
}

int isSafe(int vertex, int path[], int pos) {
    if (!graph[path[pos - 1]][vertex])
        return 0;

    for (int i = 0; i < pos; i++) {
        if (path[i] == vertex)
            return 0;
    }

    return 1;
}

int hamiltonianCircuitUtil(int path[], int pos) {
    if (pos == numVertices) {
        if (graph[path[pos - 1]][path[0]])
            return 1;
        return 0;
    }

    for (int v = 1; v < numVertices; v++) {
        if (isSafe(v, path, pos)) {
            path[pos] = v;

            if (hamiltonianCircuitUtil(path, pos + 1))
                return 1;

            path[pos] = -1; // Backtrack
        }
    }

    return 0;
}

int findHamiltonianCircuit() {
    int path[MAX_VERTICES];
    for (int i = 0; i < numVertices; i++) {
        path[i] = -1;
    }

    path[0] = 0;
    if (!hamiltonianCircuitUtil(path, 1)) {
        printf("No Hamiltonian Circuit found.\n");
        return 0;
    }

    printHamiltonianCircuit(path);
    return 1;
}

int main() {
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    findHamiltonianCircuit();

    return 0;
}
